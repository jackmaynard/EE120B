#include <avr/io.h>
#include <avr/interrupt.h>

volatile unsigned char TimerFlag = 0;
unsigned char TL_output;
unsigned char BL_output;
//unsigned char SP_output;
unsigned char TOTAL_output;
unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0;

void TimerOn() {
	TCCR1B = 0x0B;
	OCR1A = 125;
	TIMSK1 = 0x02;
	TCNT1=0;
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80;
}
void TimerOff() {
	TCCR1B = 0x00;
}
void TimerISR() {
	TimerFlag = 1;
}
ISR(TIMER1_COMPA_vect) {
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
}
enum THREE_LED {ONE, TWO, THREE} THREE_LEDS;
void THREE_LED_TICK()
{
	switch(THREE_LEDS)
	{
		case ONE:
		TL_output = 0x01;
		THREE_LEDS = TWO;
		break;
		case TWO:
		TL_output = 0x02;
		THREE_LEDS = THREE;
		break;
		case THREE:
		TL_output = 0x04;
		THREE_LEDS = ONE;
		break;
	}
}
enum BLINK {ON, OFF} BLINKS;
void BLINK_TICK()
{
	switch(BLINKS)
	{
		case ON:
		BL_output = 0x08;
		BLINKS = OFF;
		break;
		case OFF:
		BL_output = 0x00;
		BLINKS = ON;
		break;
	}
}
/*enum SPEAKER {S_ON, S_OFF} SPEAKERS;
void SPEAKER_TICK()
{
	unsigned char input_A = PINA;
	switch(SPEAKERS)
	{
		case S_ON:
			SP_output = 0xF0;
			SPEAKERS = S_OFF;
			break;
		case S_OFF:
			if(input_A)
			{
				SP_output = 0x00;
				SPEAKERS = S_OFF;
			}
			else
			{
				SP_output = 0x00;
				SPEAKERS = S_ON;
			}
			break;
	}
}
*/
enum OUTPUT {OUT} OUTPUTS;
void OUT_TICK()
{
	switch(OUTPUTS)
	{
		case OUT:
		TOTAL_output = TL_output | BL_output /*| SP_output*/;
		PORTB = TOTAL_output;
		break;
	}
}

int main(void)
{
	unsigned long TL_ELAPSEDTIME = 300;
	unsigned long BL_ELAPSEDTIME = 1000;
	unsigned long OUT_ELAPSEDTIME = 2;
	//unsigned long SP_ELAPSEDTIME = 2;
	//const unsigned long time_period = 2;
	const unsigned long time_period = 100;
	DDRB = 0xFF; PORTB = 0x00;
	DDRA = 0x00; PORTA = 0xFF;	
	//TimerSet(2);
	TimerSet(100);
	TimerOn();
	THREE_LEDS = ONE;
	BLINKS = ON;
	OUTPUTS = OUT;
	//SPEAKERS = ON;
	while (1)
	{
		if (TL_ELAPSEDTIME >= 300)
		{
			THREE_LED_TICK();
			TL_ELAPSEDTIME = 0;
		}
		if (BL_ELAPSEDTIME >= 1000)
		{
			BLINK_TICK();
			BL_ELAPSEDTIME = 0;
		}
		if (OUT_ELAPSEDTIME >= 2)
		{
			OUT_TICK();
			OUT_ELAPSEDTIME = 0;
		}
		/*if (SP_ELAPSEDTIME >= 2)
		{
			SPEAKER_TICK();
			SP_ELAPSEDTIME = 0;
		}*/
		while(!TimerFlag){}
		TimerFlag = 0;
		BL_ELAPSEDTIME += time_period;
		TL_ELAPSEDTIME += time_period;
		OUT_ELAPSEDTIME += time_period;
		//SP_ELAPSEDTIME += time_period;
	}
}

