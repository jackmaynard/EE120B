#include <avr/io.h>
#include <avr/interrupt.h>

volatile unsigned char TimerFlag = 0;
unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0; 

void TimerOn() {
	TCCR1B = 0x0B;
	OCR1A = 125; 
	TIMSK1 = 0x02;
	TCNT1=0;
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80;
}
void TimerOff() {
	TCCR1B = 0x00; 
}
void TimerISR() {
	TimerFlag = 1;
}
ISR(TIMER1_COMPA_vect) {
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) { 
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
}

enum States {init, LED1, LED2, LED3, STOP, WAIT} states;
unsigned char output = 0x00;
unsigned char input = 0x00;

void Tick() {
	switch(states) {
		case init:
			if (input == 0x01) {
				states = init;
			}
			else {
				states = LED1;
			}
			break;
		case LED1:
			if (input == 0x01){
				states = STOP;
			}
			else{
				states = LED2;
			}
			break;
		case LED2:
			if (input == 0x01) {
				states = STOP;
			}
			else {
				states = LED3;
			}
			break;
		case LED3:
			if (input == 0x01) {
				states = STOP;
			}
			else {
				states = LED1;
			}
			break;
		case STOP:
			if (input == 0x01) {
				states = STOP;
			}
			else {
				states = WAIT;
			}
			break;
		case WAIT:
			if (input == 0x01) {
				states = init;
			}
			else {
				states = WAIT;
			}
			break;
	}
	switch(states) {
		case LED1:
			output = 0x01;
			break;
		case LED2:
			output = 0x02;
			break;
		case LED3:
			output = 0x04;
			break;
		case init:
			output = 0x00;
	}
}
void main()
{
	DDRB = 0xFF; // Set port B to output
	PORTB = 0x00; // Init port B to 0s
	DDRA = 0x00;
	PORTA = 0xFF;
	
	TimerSet(1000);
	TimerOn();
	while(1) {
		input = ~PINA;
		Tick();
		PORTB = output;
		while(!TimerFlag){}
		TimerFlag = 0;
	}
	}
